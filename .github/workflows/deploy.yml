name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –∫–æ–º–º–∏—Ç–µ –≤ main/master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Download dependencies
        working-directory: ./scraper
        run: |
          go mod download
          go mod verify

      - name: Run tests
        working-directory: ./scraper
        run: |
          go test -v ./...

      - name: Build
        working-directory: ./scraper
        run: |
          go build -v ./cmd/cron/main.go
          go build -v ./cmd/scraper/main.go

  deploy:
    name: Deploy to Server
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ known_hosts
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "echo '‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!'" || {
            echo "‚ùå –û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!"
            exit 1
          }

      - name: Create .env file
        run: |
          cat > .env << EOF
          API_URL=${{ secrets.API_URL }}
          PAGES_STORAGE=./data/pages.json
          MATCHED_DIR=./data/matched
          KEYWORDS=${{ secrets.KEYWORDS }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_SEND_AS_DOCUMENT=true
          CRON_SCHEDULE=${{ secrets.CRON_SCHEDULE }}
          RUN_ON_START=false
          PROJECT_ROOT=/app
          MAX_WORKERS=${{ secrets.MAX_WORKERS }}
          EOF
      
      - name: Create deployment info file
        run: |
          cat > .deployment_info << EOF
          COMMIT_HASH=${{ github.sha }}
          COMMIT_AUTHOR=${{ github.actor }}
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s' 2>/dev/null || echo 'N/A')
          DEPLOY_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          BRANCH=${{ github.ref_name }}
          WORKFLOW_RUN=${{ github.run_number }}
          EOF

      - name: Copy files to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          set -e  # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          
          echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST \
            "mkdir -p /opt/law_scraper/scraper /opt/law_scraper/data"
          
          echo "üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
          
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º scp –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (rsync –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
          # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          echo "   ‚Üí –ö–æ–ø–∏—Ä—É–µ–º scraper/..."
          scp -r -o StrictHostKeyChecking=no ./scraper/* $SERVER_USER@$SERVER_HOST:/opt/law_scraper/scraper/ || {
            echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è scraper/"
            exit 1
          }
          
          echo "   ‚Üí –ö–æ–ø–∏—Ä—É–µ–º Dockerfile –∏ docker-compose.yml..."
          scp -o StrictHostKeyChecking=no Dockerfile $SERVER_USER@$SERVER_HOST:/opt/law_scraper/ || true
          scp -o StrictHostKeyChecking=no docker-compose.yml $SERVER_USER@$SERVER_HOST:/opt/law_scraper/ || true
          
          echo "   ‚Üí –ö–æ–ø–∏—Ä—É–µ–º .env..."
          if [ -f .env ]; then
            scp -o StrictHostKeyChecking=no .env $SERVER_USER@$SERVER_HOST:/opt/law_scraper/.env || {
              echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env"
            }
          else
            echo "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
          fi
          
          echo "   ‚Üí –ö–æ–ø–∏—Ä—É–µ–º .deployment_info..."
          if [ -f .deployment_info ]; then
            scp -o StrictHostKeyChecking=no .deployment_info $SERVER_USER@$SERVER_HOST:/opt/law_scraper/.deployment_info || {
              echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .deployment_info"
            }
          fi
          
          echo "‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST \
            "ls -la /opt/law_scraper/scraper/go.mod && echo '‚úÖ go.mod –Ω–∞–π–¥–µ–Ω'" || {
            echo "‚ùå –û—à–∏–±–∫–∞: go.mod –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
            exit 1
          }

      - name: Deploy with Docker Compose
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST bash << 'ENDSSH'
            set -e  # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            set -x  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
            
            cd /opt/law_scraper || {
              echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ /opt/law_scraper"
              exit 1
            }
            
            echo "üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ Go —Ñ–∞–π–ª–∞—Ö..."
            if [ -d "scraper/internal" ]; then
              cd scraper
              find . -name "*.go" -type f -exec sed -i 's|lawScraper/scraper/internal|github.com/notenoughtea/law_scraper/internal|g' {} + 2>/dev/null || true
              find . -name "*.go" -type f -exec sed -i 's|"lawScraper/|"github.com/notenoughtea/law_scraper/|g' {} + 2>/dev/null || true
              cd ..
            fi
            
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose down || true
            
            echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã..."
            docker-compose rm -f || true
            docker system prune -f || true
            
            echo "üî® –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
            if ! docker-compose build --no-cache; then
              echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞!"
              exit 1
            fi
            
            echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            if ! docker-compose up -d; then
              echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤!"
              docker-compose logs
              exit 1
            fi
            
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (15 —Å–µ–∫—É–Ω–¥)..."
            sleep 15
            
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker-compose ps
            
            echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
            docker-compose logs --tail=50
          ENDSSH

      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          sleep 5
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST bash << 'ENDSSH'
            set -e
            
            cd /opt/law_scraper
            
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            if docker-compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful!"
              echo ""
              echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
              docker-compose ps
              echo ""
              echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
              docker-compose logs --tail=30
            else
              echo "‚ùå Deployment failed!"
              echo ""
              echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
              docker-compose ps
              echo ""
              echo "üìã –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏:"
              docker-compose logs --tail=100
              exit 1
            fi
          ENDSSH

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Deployment to ${{ secrets.SERVER_HOST }} completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment to ${{ secrets.SERVER_HOST }} failed!"

