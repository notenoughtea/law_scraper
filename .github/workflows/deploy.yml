name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –∫–æ–º–º–∏—Ç–µ –≤ main/master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Download dependencies
        working-directory: ./scraper
        run: |
          go mod download
          go mod verify

      - name: Run tests
        working-directory: ./scraper
        run: |
          go test -v ./...

      - name: Build
        working-directory: ./scraper
        run: |
          go build -v ./cmd/cron/main.go
          go build -v ./cmd/scraper/main.go

  deploy:
    name: Deploy to Server
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          cat > .env << EOF
          API_URL=${{ secrets.API_URL }}
          PAGES_STORAGE=./data/pages.json
          MATCHED_DIR=./data/matched
          KEYWORDS=${{ secrets.KEYWORDS }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_SEND_AS_DOCUMENT=true
          CRON_SCHEDULE=${{ secrets.CRON_SCHEDULE }}
          RUN_ON_START=false
          PROJECT_ROOT=/app
          MAX_WORKERS=${{ secrets.MAX_WORKERS }}
          EOF

      - name: Copy files to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          ssh $SERVER_USER@$SERVER_HOST "mkdir -p /opt/law_scraper/{scraper,data}"
          
          # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–æ–ø–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ rsync
          rsync -avz --progress \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.env' \
            --exclude 'main' \
            --exclude '*.md' \
            ./ $SERVER_USER@$SERVER_HOST:/opt/law_scraper/
          
          # –ö–æ–ø–∏—Ä—É–µ–º .env –æ—Ç–¥–µ–ª—å–Ω–æ
          scp .env $SERVER_USER@$SERVER_HOST:/opt/law_scraper/.env || echo "‚ö†Ô∏è .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"

      - name: Deploy with Docker Compose
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'ENDSSH'
            set -e  # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            
            cd /opt/law_scraper
            
            echo "üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ Go —Ñ–∞–π–ª–∞—Ö..."
            cd scraper
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±—ã–ª–∏ —Å—Ç–∞—Ä—ã–µ)
            if [ -d "internal" ]; then
              find . -name "*.go" -type f -exec sed -i 's|lawScraper/scraper/internal|github.com/notenoughtea/law_scraper/internal|g' {} + 2>/dev/null || true
              find . -name "*.go" -type f -exec sed -i 's|"lawScraper/|"github.com/notenoughtea/law_scraper/|g' {} + 2>/dev/null || true
            fi
            cd ..
            
            echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose down || true
            
            echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
            docker-compose rm -f || true
            docker image prune -f || true
            
            echo "üî® –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
            docker-compose build --no-cache
            
            echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose up -d
            
            echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (10 —Å–µ–∫—É–Ω–¥)..."
            sleep 10
            
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker-compose ps
            
            echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
            docker-compose logs --tail=50
          ENDSSH

      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          sleep 10
          ssh $SERVER_USER@$SERVER_HOST << 'ENDSSH'
            cd /opt/law_scraper
            if docker-compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful!"
              docker-compose ps
            else
              echo "‚ùå Deployment failed!"
              docker-compose logs --tail=100
              exit 1
            fi
          ENDSSH

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Deployment to ${{ secrets.SERVER_HOST }} completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment to ${{ secrets.SERVER_HOST }} failed!"

