package clients

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"lawScraper/scraper/internal/config"
	"lawScraper/scraper/internal/logger"
)

type TelegramMessage struct {
	ChatID    string `json:"chat_id"`
	Text      string `json:"text"`
	ParseMode string `json:"parse_mode,omitempty"`
}

func SendTelegramMessage(message string) error {
	logger.Log.Info("=== –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ===")
	
	token := config.GetTelegramToken()
	chatID := config.GetTelegramChatID()

	logger.Log.Infof("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Token=%s, ChatID=%s", 
		maskToken(token), chatID)

	if token == "" || chatID == "" {
		logger.Log.Error("‚ùå Telegram bot token –∏–ª–∏ chat id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
		logger.Log.Errorf("Token –ø—É—Å—Ç–æ–π: %v, ChatID –ø—É—Å—Ç–æ–π: %v", token == "", chatID == "")
		return fmt.Errorf("telegram bot token –∏–ª–∏ chat id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
	}

	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token)
	logger.Log.Infof("URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: https://api.telegram.org/bot***HIDDEN***/sendMessage")

	msg := TelegramMessage{
		ChatID:    chatID,
		Text:      message,
		ParseMode: "HTML",
	}

	logger.Log.Infof("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ChatID=%s, –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞=%d, ParseMode=%s", 
		chatID, len(message), "HTML")
	logger.Log.Debugf("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: %s", message)

	jsonData, err := json.Marshal(msg)
	if err != nil {
		logger.Log.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}
	logger.Log.Infof("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä JSON: %d –±–∞–π—Ç", len(jsonData))

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		logger.Log.Errorf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")
	logger.Log.Info("‚úì HTTP –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω")

	logger.Log.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram API...")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		logger.Log.Errorf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}
	defer resp.Body.Close()

	logger.Log.Infof("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: Status=%d (%s)", 
		resp.StatusCode, resp.Status)

	body, readErr := io.ReadAll(resp.Body)
	if readErr != nil {
		logger.Log.Warnf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %v", readErr)
	} else {
		logger.Log.Infof("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API: %s", string(body))
	}

	if resp.StatusCode != http.StatusOK {
		logger.Log.Errorf("‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", resp.Status)
		return fmt.Errorf("telegram api –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s", resp.Status, string(body))
	}

	logger.Log.Info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
	logger.Log.Info("=== –ö–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ===")
	return nil
}

// maskToken –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskToken(token string) string {
	if token == "" {
		return "<–ü–£–°–¢–û>"
	}
	if len(token) < 10 {
		return "***"
	}
	return token[:4] + "..." + token[len(token)-4:]
}

func SendFileURLWithKeywords(fileURL string, keywords []string, pubDate string) error {
	logger.Log.Infof("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞: %s", fileURL)
	logger.Log.Infof("–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: %d (%v)", len(keywords), keywords)
	logger.Log.Infof("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %s", pubDate)
	
	keywordsStr := ""
	if len(keywords) > 0 {
		keywordsStr = keywords[0]
		for i := 1; i < len(keywords); i++ {
			keywordsStr += ", " + keywords[i]
		}
	}

	message := fmt.Sprintf(
		"üîç <b>–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</b>\n\n"+
			"üìÑ <b>–§–∞–π–ª:</b> <a href=\"%s\">–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç</a>\n"+
			"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> %s",
		fileURL,
		keywordsStr,
	)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
	if pubDate != "" {
		message += fmt.Sprintf("\nüìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> %s", pubDate)
	}

	logger.Log.Infof("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤)", len(message))
	
	err := SendTelegramMessage(message)
	if err != nil {
		logger.Log.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è %s: %v", fileURL, err)
		return err
	}
	
	logger.Log.Infof("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", fileURL)
	return nil
}

