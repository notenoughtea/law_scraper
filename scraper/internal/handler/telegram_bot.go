package handler

import (
	"fmt"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/notenoughtea/law_scraper/internal/logger"
	"github.com/notenoughtea/law_scraper/internal/repository"
	"github.com/notenoughtea/law_scraper/internal/service"
)

type TelegramBotHandler struct {
	bot          *tgbotapi.BotAPI
	scanMutex    sync.Mutex
	isScanning   bool
}

// NewTelegramBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
func NewTelegramBotHandler(bot *tgbotapi.BotAPI) *TelegramBotHandler {
	return &TelegramBotHandler{
		bot:        bot,
		isScanning: false,
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (h *TelegramBotHandler) HandleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	msg := update.Message

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
	if msg.Text == "" {
		return
	}

	logger.Log.Infof("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", msg.From.UserName, msg.Text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if msg.IsCommand() {
		h.handleCommand(msg)
		return
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	h.sendHelp(msg.Chat.ID)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (h *TelegramBotHandler) handleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		h.handleStart(msg)
	case "help":
		h.handleHelp(msg)
	case "keywords":
		h.handleKeywords(msg)
	case "set_keywords":
		h.handleSetKeywords(msg)
	case "add_keyword":
		h.handleAddKeyword(msg)
	case "remove_keyword":
		h.handleRemoveKeyword(msg)
	case "scan":
		h.handleScan(msg)
	case "clear_data":
		h.handleClearData(msg)
	default:
		h.sendMessage(msg.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *TelegramBotHandler) handleStart(msg *tgbotapi.Message) {
	welcomeText := `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Law Scraper Bot!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∞—Ö.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`

	h.sendMessage(msg.Chat.ID, welcomeText)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *TelegramBotHandler) handleHelp(msg *tgbotapi.Message) {
	h.sendHelp(msg.Chat.ID)
}

// sendHelp –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
func (h *TelegramBotHandler) sendHelp(chatID int64) {
	helpText := `üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>/keywords</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

<b>/set_keywords</b> —Å–ª–æ–≤–æ1,—Å–ª–æ–≤–æ2,—Å–ª–æ–≤–æ3
   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   –ü—Ä–∏–º–µ—Ä: /set_keywords —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç,–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ,–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

<b>/add_keyword</b> —Å–ª–æ–≤–æ
   –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
   –ü—Ä–∏–º–µ—Ä: /add_keyword —ç–∫–æ–ª–æ–≥–∏—è

<b>/remove_keyword</b> —Å–ª–æ–≤–æ
   –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
   –ü—Ä–∏–º–µ—Ä: /remove_keyword —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç

<b>/scan</b> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –≤—Ä—É—á–Ω—É—é
   –ù–∞—á–∏–Ω–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ RSS –∏ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

<b>/clear_data</b> - —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   –£–¥–∞–ª—è–µ—Ç rss.json –∏ pages.json (–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏)

<b>/help</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω
‚Ä¢ –°–ª–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã`

	h.sendMessage(chatID, helpText)
}

// handleKeywords –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /keywords - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
func (h *TelegramBotHandler) handleKeywords(msg *tgbotapi.Message) {
	keywords := repository.GetCurrentKeywords()

	var response string
	if len(keywords) == 0 {
		response = "‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_keywords –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
	} else {
		keywordsList := strings.Join(keywords, ", ")
		response = fmt.Sprintf("üîë <b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (%d):</b>\n\n%s", len(keywords), keywordsList)
	}

	h.sendMessage(msg.Chat.ID, response)
}

// handleSetKeywords –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_keywords - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
func (h *TelegramBotHandler) handleSetKeywords(msg *tgbotapi.Message) {
	args := msg.CommandArguments()
	
	if args == "" {
		h.sendMessage(msg.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ü—Ä–∏–º–µ—Ä:\n/set_keywords —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç,–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ,–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
		return
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞
	parts := strings.Split(args, ",")
	keywords := make([]string, 0, len(parts))
	
	for _, part := range parts {
		trimmed := strings.TrimSpace(part)
		if trimmed != "" {
			keywords = append(keywords, trimmed)
		}
	}

	if len(keywords) == 0 {
		h.sendMessage(msg.Chat.ID, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
	if err := repository.SetKeywords(keywords); err != nil {
		logger.Log.Errorf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: %v", err)
		h.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err))
		return
	}

	keywordsList := strings.Join(keywords, ", ")
	response := fmt.Sprintf("‚úÖ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (%d):</b>\n\n%s", len(keywords), keywordsList)
	h.sendMessage(msg.Chat.ID, response)
	
	logger.Log.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: %v", msg.From.UserName, keywords)
}

// handleAddKeyword –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add_keyword - –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ
func (h *TelegramBotHandler) handleAddKeyword(msg *tgbotapi.Message) {
	keyword := strings.TrimSpace(msg.CommandArguments())
	
	if keyword == "" {
		h.sendMessage(msg.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.\n\n–ü—Ä–∏–º–µ—Ä:\n/add_keyword —ç–∫–æ–ª–æ–≥–∏—è")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ª–æ–≤–æ –∑–∞–ø—è—Ç—ã—Ö (—á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞)
	if strings.Contains(keyword, ",") {
		h.sendMessage(msg.Chat.ID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ /add_keyword –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ.\n\n–î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/set_keywords —Å–ª–æ–≤–æ1,—Å–ª–æ–≤–æ2,—Å–ª–æ–≤–æ3")
		return
	}

	if err := repository.AddKeyword(keyword); err != nil {
		logger.Log.Errorf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: %v", err)
		h.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	keywords := repository.GetCurrentKeywords()
	keywordsList := strings.Join(keywords, ", ")
	
	response := fmt.Sprintf("‚úÖ <b>–°–ª–æ–≤–æ '%s' –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\nüîë –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (%d):\n%s", 
		strings.ToLower(keyword), len(keywords), keywordsList)
	h.sendMessage(msg.Chat.ID, response)
	
	logger.Log.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–æ–±–∞–≤–∏–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: %s", msg.From.UserName, keyword)
}

// handleRemoveKeyword –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /remove_keyword - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
func (h *TelegramBotHandler) handleRemoveKeyword(msg *tgbotapi.Message) {
	keyword := strings.TrimSpace(msg.CommandArguments())
	
	if keyword == "" {
		h.sendMessage(msg.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä:\n/remove_keyword —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
		return
	}

	if err := repository.RemoveKeyword(keyword); err != nil {
		logger.Log.Errorf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: %v", err)
		h.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	keywords := repository.GetCurrentKeywords()
	
	var response string
	if len(keywords) == 0 {
		response = fmt.Sprintf("‚úÖ <b>–°–ª–æ–≤–æ '%s' —É–¥–∞–ª–µ–Ω–æ!</b>\n\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.", 
			strings.ToLower(keyword))
	} else {
		keywordsList := strings.Join(keywords, ", ")
		response = fmt.Sprintf("‚úÖ <b>–°–ª–æ–≤–æ '%s' —É–¥–∞–ª–µ–Ω–æ!</b>\n\nüîë –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (%d):\n%s", 
			strings.ToLower(keyword), len(keywords), keywordsList)
	}
	
	h.sendMessage(msg.Chat.ID, response)
	
	logger.Log.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–¥–∞–ª–∏–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: %s", msg.From.UserName, keyword)
}

// handleScan –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /scan - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é
func (h *TelegramBotHandler) handleScan(msg *tgbotapi.Message) {
	h.scanMutex.Lock()
	if h.isScanning {
		h.scanMutex.Unlock()
		h.sendMessage(msg.Chat.ID, "‚è≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		return
	}
	h.isScanning = true
	h.scanMutex.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		defer func() {
			h.scanMutex.Lock()
			h.isScanning = false
			h.scanMutex.Unlock()
		}()

		h.sendMessage(msg.Chat.ID, "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\nüí° <i>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.</i>")
		
		matches, err := service.RunManualScan()
		if err != nil {
			h.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n%v", err))
			logger.Log.Errorf("–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
			return
		}

		h.sendMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.", matches))
		logger.Log.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—É—Å—Ç–∏–ª —Ä—É—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d", msg.From.UserName, matches)
	}()
}

// handleClearData –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear_data - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (h *TelegramBotHandler) handleClearData(msg *tgbotapi.Message) {
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	args := strings.TrimSpace(msg.CommandArguments())
	if args != "yes" {
		h.sendMessage(msg.Chat.ID, "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚Ä¢ rss.json - –∫—ç—à RSS\n‚Ä¢ pages.json - –∫—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü\n\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n<b>/clear_data yes</b>")
		return
	}

	// –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	rssErr := repository.ClearRSSData()
	pagesErr := repository.ClearPagesData()

	var response string
	if rssErr != nil && pagesErr != nil {
		response = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n\nRSS: %v\nPages: %v", rssErr, pagesErr)
	} else if rssErr != nil {
		response = fmt.Sprintf("‚ö†Ô∏è <b>–ß–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω–æ:</b>\n\n‚úÖ pages.json —É–¥–∞–ª–µ–Ω\n‚ùå rss.json: %v", rssErr)
	} else if pagesErr != nil {
		response = fmt.Sprintf("‚ö†Ô∏è <b>–ß–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω–æ:</b>\n\n‚úÖ rss.json —É–¥–∞–ª–µ–Ω\n‚ùå pages.json: %v", pagesErr)
	} else {
		response = "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>\n\n‚Ä¢ rss.json\n‚Ä¢ pages.json\n\n–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏."
	}

	h.sendMessage(msg.Chat.ID, response)
	logger.Log.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—á–∏—Å—Ç–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", msg.From.UserName)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
func (h *TelegramBotHandler) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	
	if _, err := h.bot.Send(msg); err != nil {
		logger.Log.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

